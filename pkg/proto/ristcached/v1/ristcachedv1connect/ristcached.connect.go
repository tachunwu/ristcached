// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ristcached/v1/ristcached.proto

package ristcachedv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tachunwu/ristcached/pkg/proto/ristcached/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RistcachedServiceName is the fully-qualified name of the RistcachedService service.
	RistcachedServiceName = "ristcached.v1.RistcachedService"
	// MetricsServiceName is the fully-qualified name of the MetricsService service.
	MetricsServiceName = "ristcached.v1.MetricsService"
)

// RistcachedServiceClient is a client for the ristcached.v1.RistcachedService service.
type RistcachedServiceClient interface {
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error)
	SetWithTTL(context.Context, *connect_go.Request[v1.SetWithTTLRequest]) (*connect_go.Response[v1.SetWithTTLResponse], error)
	Del(context.Context, *connect_go.Request[v1.DelRequest]) (*connect_go.Response[v1.DelResponse], error)
	GetTTL(context.Context, *connect_go.Request[v1.GetTTLRequest]) (*connect_go.Response[v1.GetTTLResponse], error)
	MaxCost(context.Context, *connect_go.Request[v1.MaxCostRequest]) (*connect_go.Response[v1.MaxCostResponse], error)
	UpdateMaxCost(context.Context, *connect_go.Request[v1.UpdateMaxCostRequest]) (*connect_go.Response[v1.UpdateMaxCostResponse], error)
	Clear(context.Context, *connect_go.Request[v1.ClearRequest]) (*connect_go.Response[v1.ClearResponse], error)
}

// NewRistcachedServiceClient constructs a client for the ristcached.v1.RistcachedService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRistcachedServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RistcachedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ristcachedServiceClient{
		get: connect_go.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/Get",
			opts...,
		),
		set: connect_go.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/Set",
			opts...,
		),
		setWithTTL: connect_go.NewClient[v1.SetWithTTLRequest, v1.SetWithTTLResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/SetWithTTL",
			opts...,
		),
		del: connect_go.NewClient[v1.DelRequest, v1.DelResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/Del",
			opts...,
		),
		getTTL: connect_go.NewClient[v1.GetTTLRequest, v1.GetTTLResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/GetTTL",
			opts...,
		),
		maxCost: connect_go.NewClient[v1.MaxCostRequest, v1.MaxCostResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/MaxCost",
			opts...,
		),
		updateMaxCost: connect_go.NewClient[v1.UpdateMaxCostRequest, v1.UpdateMaxCostResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/UpdateMaxCost",
			opts...,
		),
		clear: connect_go.NewClient[v1.ClearRequest, v1.ClearResponse](
			httpClient,
			baseURL+"/ristcached.v1.RistcachedService/Clear",
			opts...,
		),
	}
}

// ristcachedServiceClient implements RistcachedServiceClient.
type ristcachedServiceClient struct {
	get           *connect_go.Client[v1.GetRequest, v1.GetResponse]
	set           *connect_go.Client[v1.SetRequest, v1.SetResponse]
	setWithTTL    *connect_go.Client[v1.SetWithTTLRequest, v1.SetWithTTLResponse]
	del           *connect_go.Client[v1.DelRequest, v1.DelResponse]
	getTTL        *connect_go.Client[v1.GetTTLRequest, v1.GetTTLResponse]
	maxCost       *connect_go.Client[v1.MaxCostRequest, v1.MaxCostResponse]
	updateMaxCost *connect_go.Client[v1.UpdateMaxCostRequest, v1.UpdateMaxCostResponse]
	clear         *connect_go.Client[v1.ClearRequest, v1.ClearResponse]
}

// Get calls ristcached.v1.RistcachedService.Get.
func (c *ristcachedServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls ristcached.v1.RistcachedService.Set.
func (c *ristcachedServiceClient) Set(ctx context.Context, req *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// SetWithTTL calls ristcached.v1.RistcachedService.SetWithTTL.
func (c *ristcachedServiceClient) SetWithTTL(ctx context.Context, req *connect_go.Request[v1.SetWithTTLRequest]) (*connect_go.Response[v1.SetWithTTLResponse], error) {
	return c.setWithTTL.CallUnary(ctx, req)
}

// Del calls ristcached.v1.RistcachedService.Del.
func (c *ristcachedServiceClient) Del(ctx context.Context, req *connect_go.Request[v1.DelRequest]) (*connect_go.Response[v1.DelResponse], error) {
	return c.del.CallUnary(ctx, req)
}

// GetTTL calls ristcached.v1.RistcachedService.GetTTL.
func (c *ristcachedServiceClient) GetTTL(ctx context.Context, req *connect_go.Request[v1.GetTTLRequest]) (*connect_go.Response[v1.GetTTLResponse], error) {
	return c.getTTL.CallUnary(ctx, req)
}

// MaxCost calls ristcached.v1.RistcachedService.MaxCost.
func (c *ristcachedServiceClient) MaxCost(ctx context.Context, req *connect_go.Request[v1.MaxCostRequest]) (*connect_go.Response[v1.MaxCostResponse], error) {
	return c.maxCost.CallUnary(ctx, req)
}

// UpdateMaxCost calls ristcached.v1.RistcachedService.UpdateMaxCost.
func (c *ristcachedServiceClient) UpdateMaxCost(ctx context.Context, req *connect_go.Request[v1.UpdateMaxCostRequest]) (*connect_go.Response[v1.UpdateMaxCostResponse], error) {
	return c.updateMaxCost.CallUnary(ctx, req)
}

// Clear calls ristcached.v1.RistcachedService.Clear.
func (c *ristcachedServiceClient) Clear(ctx context.Context, req *connect_go.Request[v1.ClearRequest]) (*connect_go.Response[v1.ClearResponse], error) {
	return c.clear.CallUnary(ctx, req)
}

// RistcachedServiceHandler is an implementation of the ristcached.v1.RistcachedService service.
type RistcachedServiceHandler interface {
	Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error)
	Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error)
	SetWithTTL(context.Context, *connect_go.Request[v1.SetWithTTLRequest]) (*connect_go.Response[v1.SetWithTTLResponse], error)
	Del(context.Context, *connect_go.Request[v1.DelRequest]) (*connect_go.Response[v1.DelResponse], error)
	GetTTL(context.Context, *connect_go.Request[v1.GetTTLRequest]) (*connect_go.Response[v1.GetTTLResponse], error)
	MaxCost(context.Context, *connect_go.Request[v1.MaxCostRequest]) (*connect_go.Response[v1.MaxCostResponse], error)
	UpdateMaxCost(context.Context, *connect_go.Request[v1.UpdateMaxCostRequest]) (*connect_go.Response[v1.UpdateMaxCostResponse], error)
	Clear(context.Context, *connect_go.Request[v1.ClearRequest]) (*connect_go.Response[v1.ClearResponse], error)
}

// NewRistcachedServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRistcachedServiceHandler(svc RistcachedServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ristcached.v1.RistcachedService/Get", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/Set", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/Set",
		svc.Set,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/SetWithTTL", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/SetWithTTL",
		svc.SetWithTTL,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/Del", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/Del",
		svc.Del,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/GetTTL", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/GetTTL",
		svc.GetTTL,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/MaxCost", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/MaxCost",
		svc.MaxCost,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/UpdateMaxCost", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/UpdateMaxCost",
		svc.UpdateMaxCost,
		opts...,
	))
	mux.Handle("/ristcached.v1.RistcachedService/Clear", connect_go.NewUnaryHandler(
		"/ristcached.v1.RistcachedService/Clear",
		svc.Clear,
		opts...,
	))
	return "/ristcached.v1.RistcachedService/", mux
}

// UnimplementedRistcachedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRistcachedServiceHandler struct{}

func (UnimplementedRistcachedServiceHandler) Get(context.Context, *connect_go.Request[v1.GetRequest]) (*connect_go.Response[v1.GetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.Get is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) Set(context.Context, *connect_go.Request[v1.SetRequest]) (*connect_go.Response[v1.SetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.Set is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) SetWithTTL(context.Context, *connect_go.Request[v1.SetWithTTLRequest]) (*connect_go.Response[v1.SetWithTTLResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.SetWithTTL is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) Del(context.Context, *connect_go.Request[v1.DelRequest]) (*connect_go.Response[v1.DelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.Del is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) GetTTL(context.Context, *connect_go.Request[v1.GetTTLRequest]) (*connect_go.Response[v1.GetTTLResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.GetTTL is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) MaxCost(context.Context, *connect_go.Request[v1.MaxCostRequest]) (*connect_go.Response[v1.MaxCostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.MaxCost is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) UpdateMaxCost(context.Context, *connect_go.Request[v1.UpdateMaxCostRequest]) (*connect_go.Response[v1.UpdateMaxCostResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.UpdateMaxCost is not implemented"))
}

func (UnimplementedRistcachedServiceHandler) Clear(context.Context, *connect_go.Request[v1.ClearRequest]) (*connect_go.Response[v1.ClearResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.RistcachedService.Clear is not implemented"))
}

// MetricsServiceClient is a client for the ristcached.v1.MetricsService service.
type MetricsServiceClient interface {
	GetMetrics(context.Context, *connect_go.Request[v1.GetMetricsRequest]) (*connect_go.Response[v1.GetMetricsResponse], error)
}

// NewMetricsServiceClient constructs a client for the ristcached.v1.MetricsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MetricsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metricsServiceClient{
		getMetrics: connect_go.NewClient[v1.GetMetricsRequest, v1.GetMetricsResponse](
			httpClient,
			baseURL+"/ristcached.v1.MetricsService/GetMetrics",
			opts...,
		),
	}
}

// metricsServiceClient implements MetricsServiceClient.
type metricsServiceClient struct {
	getMetrics *connect_go.Client[v1.GetMetricsRequest, v1.GetMetricsResponse]
}

// GetMetrics calls ristcached.v1.MetricsService.GetMetrics.
func (c *metricsServiceClient) GetMetrics(ctx context.Context, req *connect_go.Request[v1.GetMetricsRequest]) (*connect_go.Response[v1.GetMetricsResponse], error) {
	return c.getMetrics.CallUnary(ctx, req)
}

// MetricsServiceHandler is an implementation of the ristcached.v1.MetricsService service.
type MetricsServiceHandler interface {
	GetMetrics(context.Context, *connect_go.Request[v1.GetMetricsRequest]) (*connect_go.Response[v1.GetMetricsResponse], error)
}

// NewMetricsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsServiceHandler(svc MetricsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ristcached.v1.MetricsService/GetMetrics", connect_go.NewUnaryHandler(
		"/ristcached.v1.MetricsService/GetMetrics",
		svc.GetMetrics,
		opts...,
	))
	return "/ristcached.v1.MetricsService/", mux
}

// UnimplementedMetricsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsServiceHandler struct{}

func (UnimplementedMetricsServiceHandler) GetMetrics(context.Context, *connect_go.Request[v1.GetMetricsRequest]) (*connect_go.Response[v1.GetMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ristcached.v1.MetricsService.GetMetrics is not implemented"))
}
